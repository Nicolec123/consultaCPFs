// original

// Função para renderizar os resultados com paginação
function renderResults() {
  const resultDiv = document.getElementById('result');
  const paginationDiv = document.getElementById('pagination');

  // Calcula o início e o fim da página atual
  const startIndex = (currentPage - 1) * resultsPerPage;
  const endIndex = startIndex + resultsPerPage;
  const currentResults = cpfsData.slice(startIndex, endIndex); // Pega apenas os itens da página atual

  if (currentResults.length === 0) {
      resultDiv.innerHTML = "<p>Nenhum CPF encontrado.</p>";
      return;
  }

  // Renderiza os resultados da página atual
  resultDiv.innerHTML = `
      <p style="color: green;">Consulta realizada com sucesso!</p>
      
      <ul id="cpf-list">
          ${currentResults.map(cpfData => `
              <li>
                  <p><strong>CPF:</strong> ${cpfData.cpf}</p>
                  <p><strong>Erro:</strong> ${cpfData.erro?.join(", ") || "Nenhum"}</p>
                  <p><strong>Status:</strong> ${cpfData.status}</p>
                  <p><strong>Status Mídia:</strong> ${cpfData.statusMidia}</p>
                  <p><strong>Erros:</strong> ${cpfData.erros?.join(", ") || "Nenhum"}</p>
              </li>
          `).join("")}
      </ul>
  `;

  // Criação dos botões de paginação
  const totalPages = Math.ceil(cpfsData.length / resultsPerPage);
  paginationDiv.innerHTML = "";

  // Botão "Anterior"
  const prevButton = document.createElement("button");
  prevButton.innerText = "Anterior";
  prevButton.id = "button-pagin-anterior";
  prevButton.disabled = currentPage === 1;
  prevButton.addEventListener("click", () => {
      if (currentPage > 1) {
          currentPage--;
          renderResults();
      }
  });
  paginationDiv.appendChild(prevButton);

  // Botões de números da página
  for (let i = 1; i <= totalPages; i++) {
      const pageButton = document.createElement("button");
      pageButton.innerText = i;
      pageButton.className = i === currentPage ? "active" : "";
      pageButton.addEventListener("click", () => {
          currentPage = i;
          renderResults();
      });
      paginationDiv.appendChild(pageButton);
  }

  // Botão "Próximo"
  const nextButton = document.createElement("button");
  nextButton.innerText = "Próximo";
  nextButton.id = "button-pagin-proximo";
  nextButton.disabled = currentPage === totalPages;
  nextButton.addEventListener("click", () => {
      if (currentPage < totalPages) {
          currentPage++;
          renderResults();
      }
  });
  paginationDiv.appendChild(nextButton);
}



















// Função para renderizar os resultados com paginação
function renderResults() {
  const resultDiv = document.getElementById('result');
  const paginationDiv = document.getElementById('pagination');
  
  let errosGerais = [];  // Para armazenar erros gerais que serão exibidos ao final
  
  // Calcula o início e o fim da página atual
  const startIndex = (currentPage - 1) * resultsPerPage;
  const endIndex = startIndex + resultsPerPage;
  const currentResults = cpfsData.slice(startIndex, endIndex); // Pega apenas os itens da página atual

  if (currentResults.length === 0) {
      resultDiv.innerHTML = "<p>Nenhum CPF encontrado.</p>";
      return;
  }

  // Renderiza os resultados da página atual
  let htmlContent = `
      <p style="color: green;">Consulta realizada com sucesso!</p>
      <ul id="cpf-list">
  `;

  currentResults.forEach(cpfData => {
      // Se houver erro, armazene-o para exibição no final
      if (cpfData.erro && cpfData.erro.length > 0) {
          errosGerais = errosGerais.concat(cpfData.erro);
      }

      htmlContent += `
          <li>
              <p><strong>CPF:</strong> ${cpfData.cpf}</p>
              <p><strong>Erro:</strong> ${cpfData.erro?.join(", ") || "Nenhum"}</p>
              <p><strong>Status:</strong> ${cpfData.status}</p>
              <p><strong>Status Mídia:</strong> ${cpfData.statusMidia}</p>
          </li>
      `;
  });

  htmlContent += `</ul>`;

  // Exibe os erros gerais, se houver
  if (errosGerais.length > 0) {
      htmlContent += `
          <p style="color: red;"><strong>Erros Gerais:</strong> ${errosGerais.join(", ")}</p>
      `;
  }

  // Atualiza o conteúdo do resultDiv
  resultDiv.innerHTML = htmlContent;

  // Criação dos botões de paginação
  const totalPages = Math.ceil(cpfsData.length / resultsPerPage);
  paginationDiv.innerHTML = "";

  // Botão "Anterior"
  const prevButton = document.createElement("button");
  prevButton.innerText = "Anterior";
  prevButton.id = "button-pagin-anterior";
  prevButton.disabled = currentPage === 1;
  prevButton.addEventListener("click", () => {
      if (currentPage > 1) {
          currentPage--;
          renderResults();
      }
  });
  paginationDiv.appendChild(prevButton);

  // Botões de números da página
  for (let i = 1; i <= totalPages; i++) {
      const pageButton = document.createElement("button");
      pageButton.innerText = i;
      pageButton.className = i === currentPage ? "active" : "";
      pageButton.addEventListener("click", () => {
          currentPage = i;
          renderResults();
      });
      paginationDiv.appendChild(pageButton);
  }

  // Botão "Próximo"
  const nextButton = document.createElement("button");
  nextButton.innerText = "Próximo";
  nextButton.id = "button-pagin-proximo";
  nextButton.disabled = currentPage === totalPages;
  nextButton.addEventListener("click", () => {
      if (currentPage < totalPages) {
          currentPage++;
          renderResults();
      }
  });
  paginationDiv.appendChild(nextButton);
}

// Adiciona evento ao campo de busca para filtrar múltiplos CPFs
document.getElementById("searchCpf").addEventListener("input", function () {
    const searchValue = this.value.trim();
    if (searchValue === "") {
        renderResults();
        return;
    }

    const searchList = searchValue.split(",").map(cpf => cpf.trim());
    const filteredResults = cpfsData.filter(cpfData => searchList.includes(cpfData.cpf));
    displayFilteredResults(filteredResults);
});

// Função para exibir os resultados filtrados pelo campo de busca
function displayFilteredResults(filteredResults) {
    const resultDiv = document.getElementById('result');

    if (filteredResults.length === 0) {
        resultDiv.innerHTML = "<p>Nenhum CPF encontrado, verifique o cpf digitado.</p>";
        return;
    }

    resultDiv.innerHTML = `
        <p style="color: green;">Resultados filtrados:</p>
        
        <ul>
            ${filteredResults.map(cpfData => `
                <li>
                    <p><strong>CPF:</strong> ${cpfData.cpf}</p>
                    <p><strong>Erro:</strong> ${cpfData.erro?.join(", ") || "Nenhum"}</p>
                    <p><strong>Status:</strong> ${cpfData.status}</p>
                    <p><strong>Status Mídia:</strong> ${cpfData.statusMidia}</p>
                    <p><strong>Erros:</strong> ${cpfData.erros?.join(", ") || "Nenhum"}</p>
                </li>
            `).join("")}
        </ul>
    `;
    /*document.getElementById('searchCpf').value = "";*/

}
